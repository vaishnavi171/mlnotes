<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vaishnavi</title>
    <link>https://vaishnavi171.github.io/mlnotes/</link>
    <description>Recent content on Vaishnavi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vaishnavi171.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Matplotlib Exercises</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/matplotlib/matplotlibexercises/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/matplotlib/matplotlibexercises/</guid>
      <description>#1. plotting using matplotlib from matplotlib import pyplot as plt x = [5,2,7] y = [2,16,4] plt.plot(x,y) plt.title(&amp;#39;Info&amp;#39;) plt.ylabel(&amp;#39;Y axis&amp;#39;) plt.xlabel(&amp;#39;X axis&amp;#39;) plt.show() # 2. Styling using matplotlib from matplotlib import style style.use(&amp;#39;ggplot&amp;#39;) x = [5,8,10] y = [12,16,6] x2 = [6,9,11] y2 = [6,15,7] plt.plot(x,y,&amp;#39;g&amp;#39;,label=&amp;#39;line one&amp;#39;, linewidth=5) plt.plot(x2,y2,&amp;#39;c&amp;#39;,label=&amp;#39;line two&amp;#39;,linewidth=5) plt.title(&amp;#39;Epic Info&amp;#39;) plt.ylabel(&amp;#39;Y axis&amp;#39;) plt.xlabel(&amp;#39;X axis&amp;#39;) plt.legend() plt.grid(True,color=&amp;#39;k&amp;#39;) plt.show() # 3. plot using green dots plt.plot([1,2,3,4,5], [1,2,3,4,10], &amp;#39;go&amp;#39;) plt.show()  # 4.</description>
    </item>
    
    <item>
      <title>Numpy Exercises</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/numpy/numpyexercices/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/numpy/numpyexercices/</guid>
      <description>import numpy as np # 1. Creating array object  arr = np.array( [[ 1, 2, 3], [ 4, 2, 5]] ) # Printing type of arr object  print(&amp;#34;Array is of type: &amp;#34;, type(arr)) # Printing array dimensions (axes) print(&amp;#34;No. of dimensions: &amp;#34;, arr.ndim) # Printing shape of array  print(&amp;#34;Shape of array: &amp;#34;, arr.shape) # Printing size (total number of elements) of array  print(&amp;#34;Size of array: &amp;#34;, arr.</description>
    </item>
    
    <item>
      <title>Pandas Exercises</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/pandas/pandas/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/pandas/pandas/</guid>
      <description># 1. Loading and finding info of data import pandas as pd df = pd.read_excel(open(&amp;#39;kapi.xlsx&amp;#39;, &amp;#39;rb&amp;#39;),sheet_name=&amp;#39;ActorScore&amp;#39;) df.info() print(&amp;#34;----------------&amp;#34;) print(df.describe()) &amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt; RangeIndex: 1286 entries, 0 to 1285 Data columns (total 7 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Artist Name 989 non-null object 1 Year 1286 non-null int64 2 Movie 283 non-null object 3 Critic Score 211 non-null float64 4 Audience Score 211 non-null float64 5 Box Office Score 211 non-null float64 6 Updated By 0 non-null float64 dtypes: float64(4), int64(1), object(2) memory usage: 70.</description>
    </item>
    
    <item>
      <title>Confusion Matrix</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/confusion_matrix/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/confusion_matrix/</guid>
      <description>from sklearn.metrics import confusion_matrix
var1 = &amp;#34;Cat&amp;#34; var2 = &amp;#34;Ant&amp;#34; var3 = &amp;#34;Bird&amp;#34;true = [var3, var1, var3, var3, var1, var2] pred = [var1, var1, var3, var3, var1, var3]confusion_matrix(true, pred, labels=[var1, var2, var3]) array([[2, 0, 0], [0, 0, 1], [1, 0, 2]])  </description>
    </item>
    
    <item>
      <title>Custom Function</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/custom_function/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/custom_function/</guid>
      <description>import pandas as pddata = [&amp;#39;Vachitaya aapuuuuuuuuu&amp;#39;,&amp;#39;Sing in the rain&amp;#39; ,&amp;#39;Great power comes wih great &amp;#39;] df = pd.DataFrame(data, columns = [&amp;#39;Sent&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sent     0 Vachitaya aapuuuuuuuuu   1 Sing in the rain   2 Great power comes wih great     def sent_length(message): return (len(message))df[&amp;#39;len&amp;#39;] = df[&amp;#39;Sent&amp;#39;].</description>
    </item>
    
    <item>
      <title>Label Encoder</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/label_encoder/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/label_encoder/</guid>
      <description>import pandas as pdcontent = [&amp;#39;ham&amp;#39;,&amp;#39;spam&amp;#39;,&amp;#39;ham&amp;#39;]df=pd.DataFrame(content,columns={&amp;#39;Sms content&amp;#39;}) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sms content     0 ham   1 spam   2 ham     # encode from sklearn import preprocessing encode = preprocessing.LabelEncoder() df[&amp;#39;find spam&amp;#39;] = encode.fit_transform(df[&amp;#39;Sms content&amp;#39;]) df  .</description>
    </item>
    
    <item>
      <title>Lambda Function</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/lambda_function/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/lambda_function/</guid>
      <description>import pandas as pdcontent = [&amp;#39;hi&amp;#39;,&amp;#39;hello&amp;#39;,&amp;#39;how are you&amp;#39;]df=pd.DataFrame(content,columns={&amp;#39;Sms content&amp;#39;}) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sms content     0 hi   1 hello   2 how are you     df[&amp;#39;msg_length&amp;#39;] = df[&amp;#39;Sms content&amp;#39;].apply(lambda x:len(x)) df.head()  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .</description>
    </item>
    
    <item>
      <title>List Append</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/list_append/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/list_append/</guid>
      <description>list1 = [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;] list1 [&#39;a&#39;, &#39;b&#39;]  list1.append(&amp;#39;c&amp;#39;) list1 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;c&#39;]  </description>
    </item>
    
    <item>
      <title>Post Stemmer</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/post_stemmer/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/post_stemmer/</guid>
      <description>from nltk.stem import PorterStemmer e_words= [&amp;#34;wait&amp;#34;, &amp;#34;waiting&amp;#34;, &amp;#34;waited&amp;#34;, &amp;#34;waits&amp;#34;] ps =PorterStemmer() for w in e_words: rootWord=ps.stem(w) print(rootWord) wait wait wait wait  </description>
    </item>
    
    <item>
      <title>Remove Punctuation</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/remove_punctuation/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/remove_punctuation/</guid>
      <description>import pandas as pdcontent = [&amp;#39;hey!&amp;#39;,&amp;#39;great..&amp;#39;,&amp;#39;nice@&amp;#39;]df=pd.DataFrame(content,columns={&amp;#39;Sms content&amp;#39;}) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sms content     0 hey!   1 great..   2 nice@     import string string.punctuation def remove_punctuation(text): new_text=&amp;#39;&amp;#39;.join([char for char in text if char not in string.punctuation]) return new_textdf[&amp;#39;new_sms&amp;#39;]=df[&amp;#39;Sms content&amp;#39;].</description>
    </item>
    
    <item>
      <title>Remove Stopwords</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/remove_stopwords/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/remove_stopwords/</guid>
      <description>import pandas as pdcontent = [&amp;#39;hey i am your boss!&amp;#39;,&amp;#39;he is great..&amp;#39;,&amp;#39;nice@&amp;#39;]df=pd.DataFrame(content,columns={&amp;#39;Sms content&amp;#39;}) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sms content     0 hey i am your boss!   1 he is great..   2 nice@     import nltk nltk.download(&amp;#39;stopwords&amp;#39;) stopwords=nltk.</description>
    </item>
    
    <item>
      <title>Rename Column</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/rename_column/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/rename_column/</guid>
      <description>import pandas as pddata = [&amp;#39;Database team&amp;#39;,&amp;#39;ML team&amp;#39; ,&amp;#39;Flask team&amp;#39;] df = pd.DataFrame(data, columns = [&amp;#39;Team&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Team     0 Database team   1 ML team   2 Flask team     df.columns=[&amp;#39;Intern Team&amp;#39;] df  .</description>
    </item>
    
    <item>
      <title>Scikit Learn notes</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/scikit/scikit_learn/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/scikit/scikit_learn/</guid>
      <description># 1. Enhances contrast in large almost uniform regions. import skimage from skimage import data from skimage import exposure from matplotlib import pyplot as plt camera = data.camera() camera_equalized = exposure.equalize_hist(camera) plt.imshow(camera_equalized) &amp;lt;matplotlib.image.AxesImage at 0x7f60bd119fd0&amp;gt;  # 2. Data Set reading from sklearn import datasets # Load data iris= datasets.load_iris() # Print shape of data to confirm data is loaded print(iris.data.shape) (150, 4)  # 3. Train and Test Split X = iris.</description>
    </item>
    
    <item>
      <title>Tokenisation</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/tokenisation/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/tokenisation/</guid>
      <description>import pandas as pdcontent = [&amp;#39;hey boss!&amp;#39;,&amp;#39;great..&amp;#39;,&amp;#39;nice@&amp;#39;]df=pd.DataFrame(content,columns={&amp;#39;Sms content&amp;#39;}) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sms content     0 hey boss!   1 great..   2 nice@     import re def tokenize(text): tokens=re.split(&amp;#39;\W+&amp;#39;,text) return tokensdf[&amp;#39;tokenized_text&amp;#39;]=df[&amp;#39;Sms content&amp;#39;].apply(lambda row : tokenize(row.lower())) df.head()  .</description>
    </item>
    
    <item>
      <title>Unique Function</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/unique_function/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/unique_function/</guid>
      <description>import pandas as pdpd.Series([2, 4, 3, 3], name=&amp;#39;P&amp;#39;).unique() array([2, 4, 3])  </description>
    </item>
    
    <item>
      <title>f1 Score</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/f1_score/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/f1_score/</guid>
      <description>from sklearn.metrics import f1_scoretrue = [0, 1, 2, 0, 1, 2] pred = [0, 2, 1, 0, 0, 1]f1_score(true, pred, average=&amp;#39;macro&amp;#39;) 0.26666666666666666  f1_score(true, pred, average=&amp;#39;micro&amp;#39;) 0.3333333333333333  f1_score(true, pred, average=&amp;#39;weighted&amp;#39;) 0.26666666666666666  </description>
    </item>
    
    <item>
      <title>Simple Python</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/simple-python/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/simple-python/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://vaishnavi171.github.io/mlnotes/python/basics/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vaishnavi171.github.io/mlnotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
  </channel>
</rss>